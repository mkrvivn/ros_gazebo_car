<?xml version="1.0"?>

<robot name="car" xmlns:xacro="http://www.ros.org/wiki/xacro">
	
  <xacro:property name="base_width" value="0.4" />
  <xacro:property name="base_length" value="${base_width * 3.4}" />
  <xacro:property name="base_height" value="0.6" />

  <xacro:property name="wheel_radius" value="0.20" />
  <xacro:property name="wheel_length" value="0.2" />

  <gazebo reference="chassis">
  	<material>CarMaterial</material>
  </gazebo>
  <xacro:macro name="cylinder_inertial" params="radius height mass">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <mass value="${mass}"/>
      <inertia ixx="${1/2 * mass * radius * radius}"
               ixy="0" ixz="0"
               iyy="${1/12 * mass * (3 * radius * radius + height * height)}"
               iyz="0"
               izz="${1/12 * mass * (3 * radius * radius + height * height)}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="null_inertial">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="sphere_inertial" params="radius mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${radius * radius * mass * 2.0/3.0}"
               ixy="0" ixz="0"
               iyy="${radius * radius * mass * 2.0/3.0}"
               iyz="0"
               izz="${radius * radius * mass * 2.0/3.0}"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="solid_cuboid_inertial" params="width depth height mass *origin">
    <inertial>
      <xacro:insert_block name="origin"/>
      <mass value="${mass}"/>
      <inertia ixx="${mass * (width * width + height * height) / 12.0}"
               ixy="0" ixz="0"
               iyy="${mass * (depth * depth + height * height) / 12.0}"
               iyz="0"
               izz="${mass * (width * width + depth * depth) / 12.0}"/>
    </inertial>
  </xacro:macro>

  <link name="base_link">
    <parent link="odom"/>
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="chassis_mat"/>
    </visual>
  </link>

   <joint name="base_link_to_chassis" type="fixed">
      <origin xyz="0.476 0 0.3" rpy="0 0 0"/>
      <parent link="base_link"/>
      <child link="chassis"/>
    </joint>

  <link name="chassis">
    <collision>
      <origin xyz="0 0 0.27" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length + 0.2} ${base_width} ${base_height - 0.2}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://ackermann_vehicle_description/meshes/car.dae"/>
      </geometry>
    </visual>

    <xacro:null_inertial/>
  </link>

  <xacro:macro name="steering_knuckle" params="suffix sidefr sidelr">
    <xacro:if value="${sidefr == 1}">
      <joint name="${suffix}_steering_knuckle_joint" type="revolute">
        <origin xyz="${base_length / 100 * 35 * sidefr} ${0.4 * sidelr} -0.3" rpy="0 0 ${pi/2}"/>
        <parent link="chassis"/>
        <child link="${suffix}_steering_knuckle_link"/>
        <axis xyz="0 0 1" />
        <limit lower="${0.5 * -1}" upper="${0.5}" effort="1.25" velocity="2.0" />
      </joint>
    <transmission name="${suffix}_wheel_steering">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${suffix}_steering_knuckle_joint">
        <hardwareInterface>PositionJointInterface</hardwareInterface>
      </joint>
      <actuator name="${suffix}_wheel_steering_act">
        <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
      </actuator>
    </transmission>
    </xacro:if>
    <xacro:unless value="${sidefr == 1}">
      <joint name="${suffix}_steering_knuckle_joint" type="fixed">
        <origin xyz="${base_length / 100 * 35 * sidefr} ${0.4 * sidelr} -0.3" rpy="0 0 ${pi/2}"/>
        <parent link="chassis"/>
        <child link="${suffix}_steering_knuckle_link"/>
      </joint>
    </xacro:unless>
  <link name="${suffix}_steering_knuckle_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
	<sphere radius="0.01" />
      </geometry>
      <material name="white"/>
    </visual>
    <xacro:null_inertial/>
  </link>
  </xacro:macro>

  <xacro:steering_knuckle suffix="front_left" sidefr="1" sidelr="1" />
  <xacro:steering_knuckle suffix="front_right" sidefr="1" sidelr="-1" />
  <xacro:steering_knuckle suffix="rear_left" sidefr="-1" sidelr="1" />
  <xacro:steering_knuckle suffix="rear_right" sidefr="-1" sidelr="-1" />

  <xacro:macro name="wheel" params="suffix sidefr sidelr">
    <joint name="${suffix}_axel_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="${suffix}_steering_knuckle_link"/>
      <child link="${suffix}_wheel_axel"/>
    </joint>
   <link name="${suffix}_wheel_axel">
     <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
	<sphere radius="0.01" />
      </geometry>
      <material name="white"/>
    </visual>
     <xacro:null_inertial/>
   </link>
   <joint name="${suffix}_wheel_joint" type="continuous">
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <parent link="${suffix}_wheel_axel"/>
     <child link="${suffix}_wheel_link"/>
     <axis xyz="1 0 0" />
     <limit effort="100000.0" velocity="255.0" />
   </joint>
   <xacro:if value="${sidefr == 1}">
     <transmission name="${suffix}_wheel_vel">
       <type>transmission_interface/SimpleTransmission</type>
       <joint name="${suffix}_wheel_joint">
         <hardwareInterface>VelocityJointInterface</hardwareInterface>
       </joint>
       <actuator name="${suffix}_wheel_vel_act">
         <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
       </actuator>
     </transmission>
   </xacro:if>
   <link name="${suffix}_wheel_link">
     <collision>
       <origin xyz="0 0 0" rpy="0 ${pi / 2} 0"/>
       <geometry>
	 <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
       </geometry>
     </collision>
     <visual>
       <origin xyz="0 0 0" rpy="0 ${pi / 2} 0"/>
       <geometry>
         <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
       </geometry>
     </visual>
        <xacro:cylinder_inertial
          radius="${wheel_radius}"
          height="${wheel_length}" mass="${2.0}"/>
    </link>
  </xacro:macro>

  <xacro:wheel suffix="front_left" sidefr="1" sidelr="1" />
  <xacro:wheel suffix="front_right" sidefr="1" sidelr="-1" />
  <xacro:wheel suffix="rear_left" sidefr="-1" sidelr="1" />
  <xacro:wheel suffix="rear_right" sidefr="-1" sidelr="-1" />

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"/>
  </gazebo>

  <joint name="hokuyo_joint" type="fixed">
    <axis xyz="0 0 0" />
    <origin xyz="0.574 0 0.72" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="hokuyo"/>
  </joint>

  <!-- Hokuyo Laser -->
  <link name="hokuyo">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://ackermann_vehicle_description/meshes/hokuyo.dae"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

	<!-- hokuyo -->
 <gazebo reference="hokuyo">
    <sensor type="gpu_ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1080</samples>
            <resolution>1</resolution>
            <min_angle>-2,35619</min_angle>
            <max_angle>2,35619</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>30.0</max>
          <resolution>0.005</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
        <topicName>/scan</topicName>
        <frameName>hokuyo</frameName>
      </plugin>
    </sensor>
  </gazebo> 

	<gazebo><plugin filename="libgazebo_ros_p3d.so" name="publisher_fake_odom">
  <updateRate>100.0</updateRate>
  <bodyName>base_link</bodyName>
  <topicName>odom_truth</topicName>
  <gaussianNoise>0.0</gaussianNoise>
  <frameName>map</frameName>
</plugin></gazebo>
</robot>
